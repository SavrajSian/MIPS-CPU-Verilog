module ALU(
    input reset,
    input clk,

    input logic[4:0] control,
    input logic[31:0] a,
    input logic[31:0] b,
    input logic[5:0] sa,
    input logic[15:0] immediate

    output logic[31:0] r,
    output logic zero,
);
    logic[4:0] instr;
    logic[15:0] lower;
    assign zero = (result == 0) ? 1 : 0;
    assign lower = b[15:0];
 
   always_ff  @(posedge clk) begin
       if (reset==1) begin
            r<=0
       end
       else begin
            case(control_signal):
                00000000: begin r <= a + immediate; end         //ADDIU
                00000001: begin r <= a + b; end                 //ADDU
                00000010: begin r <= a & b; end                 //AND
                00000011: begin r <= a & immediate; end         //ANDI
                //00000100-00010011 branch
                //00000100:
                //00000101:
                //00000110:
                //00000111:
                //00001000:
                //00001001:
                //00001010:
                //00001011:
                00001100: begin r <= a[30:0] / b[30:0];
                                 if(a[31]+b[31]==0) begin
                                    r[31]=0 end
                                 else begin
                                    r[31]=1 end end             //DIV
                00001101: begin r <= a / b; end                 //DIVU
                //00001110-00010001 jump
                //00001110:
                //00001111:
                //00010000:
                //00010001:
                //00010010-00011001 load
                //00010010:
                //00010011:
                //00010100:
                //00010101:
                //00010110:
                //00010111:
                //00011000:
                //00011001:
                00011010: begin r <= a * 2; end                  //MVHI
                00011011: begin r <= a / 2; end                  //MVLO
                00011100: begin r <= a[30:0] * b[30:0];
                                 if(a[31]+b[31]==0) begin
                                    r[31]=0 end
                                 else begin
                                    r[31]=1 end end               //MULT
                00011101: begin r <= a * b; end                   //MULTU
                00011110: begin r <= a | b; end                   //OR
                00011111: begin r <= a | immediate; end           //ORI 
                //00100000-00100001 store
                //00100000:
                //00100001:
                //00100010-00100011 shift
                //00100010:
                //00100011:
                00100100: begin if(a[31]==1 && b[31]==0) begin 
                                  r <= 1; end
                              elif(a[31]==0 && b[31]==1) begin
                                  r <= 0; end
                              else 
                                 if(a[30:0] > b[30:0]) begin
                                       r <= 0; end
                                 else begin
                                       r <= 1; end
                                end                                 //SLT
                00100101: begin if(a[31]==1 && immediate[31]==0) begin 
                                  r <= 1; end
                              elif(a[31]==0 && immediate[31]==1) begin
                                  r <= 0; end
                              else 
                                 if(a[30:0] > immediate[30:0]) begin
                                       r <= 0; end
                                 else begin
                                       r <= 1; end
                                end                                  //SLTI
                00100110: begin if(a > immediate) begin 
                                    r <= 0; end
                                else begin
                                    r <= 1; end                      //SLTIU
                00100111: begin if(a > b) begin
                                     r <= 0; end
                                else begin
                                     r <= 1; end                     //SLTU 
                //00101000-00110011 shift
                //00101000:
                //00101001:
                //00101010:
                //00101011:
                00101100: r <= a - b; end                             //SUBU 
                //00101101 store
                //00101101:
                00101110: r <= a ^ b; end                             //XOR 
                00101111: r <= a ^ immediate; end                     //XORI
            endcase
        end
    end
endmodule
